/*

        The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?


*/

#include<iostream>
#include<string>
#include<math.h>

using namespace std;


int getTriangular(int n){
    return ( (n * (n+1)) / 2);
}


/*
    SOLUTION:
    Use the well known formula to calculate the sum
    that is the value of the triangular number.
    Iterate up to the square root of each triangular
    and count the factors until there is one above 500.

*/

int main(){
    cout << "Hello Project Euler!" << endl;
    cout << "Problem # 12" << endl;
    cout << "Highly divisible triangular number" << endl;

    int numToFactor = 1;
    int factorCount = 0;
    int factorLimit = 1;

    int index = 0;
    while(factorCount < 500){
        ++index;
        numToFactor = getTriangular(index);
        factorCount = 0;
        factorLimit = sqrt(numToFactor);

        for(int k = 1;k <= factorLimit; ++k)
            if(numToFactor%k == 0) factorCount += 2; //check all factors and count.
        // check if root is a factor
        if(floor(factorLimit) * floor(factorLimit) == numToFactor) factorCount -= 1; 
    }
    cout << "The first triangular above 500 factors is  " << getTriangular(index) << endl;
    return 0;
}

